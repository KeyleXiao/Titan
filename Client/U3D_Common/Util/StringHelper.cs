//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// class ScpReader
// csv文件读取
// 调用ScpReader::ReadCSVFile(string filename, bool headerRow, DataTable datatable)读入一个csv文件，保存在datatable中
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;
using UnityEngine;

//namespace Zen
//{
public partial class StringHelper
{
    public static string CopyString(string srcStr)
    {

        return string.Intern(srcStr);
    }

    static System.Text.StringBuilder BuildStringBuilder = new System.Text.StringBuilder(512);
    public static string BuildString(params object[] parms)
    {
        BuildStringBuilder.Length = 0;
        foreach (object o in parms)
        {
            BuildStringBuilder.Append(o);
        }
        return BuildStringBuilder.ToString();
    }

    public static bool StringToEnum(Type enumType, string str, out System.Object result)
    {
        result = null;
        try
        {
            if (str.Equals(string.Empty))
            {
                return false;
            }
            result = Enum.Parse(enumType, str, false);
        }
        catch (Exception e)
        {
            return false;
        }
        return true;
    }

    static System.Text.StringBuilder FormatStringBuilder = new System.Text.StringBuilder(512);
    public static string FormatString(string format, params object[] args)
    {
        if (string.IsNullOrEmpty(format) || (null == args))
        {
            return string.Empty;
        }

        int len = format.Length;
        for (int i = 0; i < args.Length; i++)
        {
            if (args[i] is string)
            {
                len += ((string)args[i]).Length;
            }
            else if (args[i] is int)
            {
                len += 16;
            }
            else if (args[i] is double)
            {
                len += 16;
            }
            else if (args[i] is float)
            {
                len += 16;
            }
            else
            {
                len += 8;
            }
        }

        if (len > FormatStringBuilder.Capacity)
        {
            FormatStringBuilder.Capacity = len;
        }
        FormatStringBuilder.Length = 0;
        FormatStringBuilder.AppendFormat(format, args);
        return FormatStringBuilder.ToString();
    }
}
//}

