//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// class ScpReader
// csv文件读取
// 调用ScpReader::ReadCSVFile(string filename, bool headerRow, DataTable datatable)读入一个csv文件，保存在datatable中
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;

//namespace Zen
//{
		public class ScpReaderEditor
		{
				string[][] Array = null;
				string tag="";

				public ScpReaderEditor (string name)
				{
					tag = name;

                    if ((name.Length>=3) && (name.Substring(0,3) == "../")) {
						int len=name.Length;
						name=name.Substring(3,len-3);
					}
					else {
						name="Scp/"+name;
					}

					string text = "";
					if (Application.isEditor) {
						string spath = Application.dataPath+"/Resources/"+name+".csv";
						if (System.IO.File.Exists(spath)==false){
							return;
						}
						FileStream fs=new FileStream(spath,FileMode.Open,FileAccess.Read,FileShare.ReadWrite);
						StreamReader sr = new StreamReader(fs);
						if (sr == null) {
							return;
						}
						text=sr.ReadToEnd();
						sr.Close();
					}
					else {
						TextAsset pAsset = (TextAsset)Resources.Load (name);
						if (pAsset == null) {
							return;
						}
						text=pAsset.text;
					}
					LoadFromString (text);
				}

                public ScpReaderEditor(TextAsset pAsset, string tag)
				{
					if (pAsset == null) {
						return;
					}
					LoadFromString (pAsset.text);
	
				}

				public ScpReaderEditor (string text,string tag)
				{
					LoadFromString (text);
				}

				private void LoadFromString(string text)
				{

						//读取每一行的内容
						string [] lineArray = text.Split ("\r" [0]);
					
						//创建二维数组
						Array = new string [lineArray.Length][];
					
						//把csv中的数据储存在二位数组中
						for (int i =0; i < lineArray.Length; i++) {
								Array [i] = lineArray [i].Split ("," [0]);
							if (Array[i].Length>0)
							{
								string s=Array[i][0];
								if (s.Length>0 && s[0]=='\n')
								{
									s=s.Substring(1);
								}
								Array[i][0]=s;
							}
						}

						
				}

		public void Dispose()
		{
			Array = null;
		}
		
		public int GetRecordCount ()
		{
			if (Array == null)
				return 0;
			return Array.GetLength (0) - 1;
		}

		public int GetRecordCount (int dwRow)
		{
			if (Array == null)
				return 0;

			if (dwRow + 1 >= Array.GetLength (0)) {
				return 0;
			}
			return Array [dwRow + 1].Length;
		}

		public int GetFieldCount ()
				{
						if (Array == null)
								return 0;
						if (Array.Length<1)
							return 0;
						return Array[0].Length;
				}

				public string GetFieldDesc (int dwCol)
				{
						if (Array == null)
								return "";
						if (dwCol >= Array [0].Length) {
							return "";
						}
						return Array [0] [dwCol];
				}

				public object GetObject (int dwRow, int dwCol)
				{
					if (dwRow + 1 >= Array.GetLength (0)) {
						return null;
					}
					if (dwCol >= Array [dwRow + 1].Length) {
						return null;
					}

					string ob = Array [dwRow + 1] [dwCol];
					if (ob != null) {
						object value;
						Type nValType = StringConverter.ConvertString (ob, out value);
						if (nValType == typeof(float) 
						    || nValType == typeof(double)) {
							float result = Convert.ToSingle (ob.ToString ());
							return result;
						}
						if (nValType == typeof(byte) 
						    || nValType == typeof(short)
						    || nValType == typeof(int))
						{
							int result = Convert.ToInt32 (ob.ToString ());
							return result;
						}
						else
						{
							return ob;
						}
					}
					
					return null;
				}

				public float GetFloat (int dwRow, int dwCol, float fDef)
				{
						if (dwRow + 1 >= Array.GetLength (0)) {
							return fDef;
						}
						if (dwCol >= Array [dwRow + 1].Length) {
							return fDef;
						}

						float result = fDef;
			
						string ob = Array [dwRow + 1] [dwCol];
						if (ob != null) {
							bool br=float.TryParse(ob,out result);
							if (br==false)result=fDef;
							return result;
						}
			
						return fDef;
				}

		
				public int GetInt (int dwRow, int dwCol, int nDef)
				{
						if (dwRow + 1 >= Array.GetLength (0)) {
							return nDef;
						}
						if (dwCol >= Array [dwRow + 1].Length) {
							return nDef;
						}

						int result = nDef;

						string ob = Array [dwRow + 1] [dwCol];
						if (ob != null) {
							bool br=int.TryParse(ob,out result);
							if (br==false)result=nDef;
							return result;
						}
					
						return nDef;
				}

				public long GetLong (int dwRow, int dwCol, long nDef)
				{
					if (dwRow + 1 >= Array.GetLength (0)) {
						return nDef;
					}
					if (dwCol >= Array [dwRow + 1].Length) {
						return nDef;
					}
					
					long result = nDef;
					
					string ob = Array [dwRow + 1] [dwCol];
					if (ob != null) {
						bool br=long.TryParse(ob,out result);
						if (br==false)result=nDef;
						return result;
					}
					
					return nDef;
				}
				
				public string GetString (int dwRow, int dwCol, string strVal)
				{
						if (dwRow + 1 >= Array.GetLength (0)) {
							return strVal;
						}
						if (dwCol >= Array [dwRow + 1].Length) {
							return strVal;
						}

						string ob = Array [dwRow + 1] [dwCol];
						if (ob != null) {
								return ob;
						}
						return strVal;
				}

                /// <summary>
                /// Read the row data read using repeated ReadRow() calls and build a DataColumnCollection with types and column names
                /// </summary>
                /// <param name="headerRow">True if the first row contains headers</param>
                /// <returns>System.Data.DataTable object populated with the row data</returns>
                public void CreateDataTable(bool headerRow, DataTable table)
                {
                    // Read the CSV data into rows
                    //List<List<string>> rows = new List<List<string>>();
                    //List<string> readRow = null;
                    //while ((readRow = ReadRowString()) != null)
                    //    rows.Add(readRow);

                    // The names (if headerRow is true) will be stored in these lists            
                    List<string> columnNames = new List<string>();

                    // Read the column names from the header row (if there is one)
                    if (headerRow)
                    {
                        for (int i = 0; i < GetFieldCount(); i++)
                        {
                            columnNames.Add(GetFieldDesc(i));
                        }
                    }
                    //foreach (string name in rows[0])
                    //columnNames.Add(name.ToString());

                    // Create the table and add the columns            
                    for (int i = 0; i < columnNames.Count; i++)
                    {
                        if (i != columnNames.Count - 1 || columnNames[i].Length > 0)
                        {
                            table.AddColumn(columnNames[i]);
                        }
                    }

                    // Add the data from the rows
                    //bool headerRead = false;
                    //foreach (List<string> row in rows)

                    if (headerRow==false)
                    {
                        int nCol = GetFieldCount();
                        if (nCol == 1 && "" == GetFieldDesc(0))
                        {
                        }
                        else
                        {
                            if (nCol > 0)
                            {
                                table.AddRow();
                            }
                            for (int i = 0; i < nCol; i++)
                            {                                
                                string s = GetFieldDesc(i);
                                if (i != nCol - 1 || s.Length > 0)
                                {
                                    table.AddItem(i, s);
                                }
                            }                                
                        }
                    }

                    int nRow = GetRecordCount();
                    for (int k = 0; k < nRow; k++)
                    {
                        int nCol = GetRecordCount(k);
                        if (nCol == 1 && "" == GetString(k, 0, ""))
                        {
                            continue;
                        }
                        if (nCol > 0)
                        {
                            table.AddRow();
                        }
                        for (int i = 0; i < nCol; i++)
                        {
                            string s=GetString(k, i, "");
                            if (i != nCol - 1 || s.Length > 0)
                            {
                                table.AddItem(i, s);
                            }
                        }

                    }
                }

                public static void ReadCSVFile(string filename, bool headerRow, DataTable datatable)
                {
                    //ScpReader reader = new ScpReader(filename);
                    //reader.CreateDataTable(headerRow, datatable);
                    //reader.Dispose();
                }
		}
//}

