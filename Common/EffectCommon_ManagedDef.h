/*******************************************************************
** 文件名:	EffectCommon_ManagedDef.h
** 版  权:	(C) 深圳冰川网络技术有限公司 2008 - All Rights Reserved
** 创建人:	彭政林
** 日  期:	4/09/2015
** 版  本:	1.0
** 描  述:	效果公共定义文件，服务器和客户端共用文件
********************************************************************/

#ifndef __EFFCTCOMMON_MANAGEDDEF_H__
#define __EFFCTCOMMON_MANAGEDDEF_H__

#pragma once
#include "Event_ManagedDef.h"
#include "SpellDef_ManagedDef.h"
using namespace SPELL;

// 效果概率基数
#define EFFECT_PROB_VALUE	10000

// 提示文字长度
#define TIPS_TEXT_LEN	256

// 技能单个字符串数据长度
#define SINGLE_STR_SPELL_DATA_LEN 64

// 效果增加选取目标数量
#define EFFECT_CHOOSE_TARGET_COUNT 8

DESC("改变位置类型")
ENUM TRANSLOCATION_TYPE
{
	DESC("目标Tile")
	TRANSLOCATION_TILE = 0,
	DESC("目标实体")
	TRANSLOCATION_TARGET,
	DESC("回城")
	TRANSLOCATION_BACKCITY,
};

DESC("技能累积类型")
ENUM SPELLOVERLAY_TYPE
{
	DESC("设置")
	SPELLOVERLAY_SET = 0,
	DESC("增加,不能超过上限值")
	SPELLOVERLAY_ADD,
	DESC("减少,不能超过下限值")
	SPELLOVERLAY_LESSEN,
};

DESC("移动类型")
ENUM MOVE_TYPE
{
	DESC("冲锋")
	MOVE_CHARGE = 0,
	DESC("击退")
	MOVE_BACK,
	DESC("击飞")
	MOVE_FLY,
	DESC("撞飞")
	MOVE_STRIKE,
	DESC("翻滚")
	MOVE_ROLL,
};

DESC("移动位置类型")
ENUM MOVE_LOC_TYPE
{
    DESC("移动到目标点")
    MOVE_LOC_TILE = 0,
    DESC("移动到目标实体")
    MOVE_LOC_TARGET,
    DESC("向目标点方向移动")
    MOVE_LOC_DIR,
    DESC("无目标点")
    MOVE_LOC_NONE,
};

DESC("移动方向类型")
ENUM MOVE_DIR_TYPE
{
    DESC("无效")
    MOVE_DIR_INVALID = 0,
    DESC("朝前")
    MOVE_DIR_FRONT,
    DESC("朝后")
    MOVE_DIR_BACK,
    DESC("朝左")
    MOVE_DIR_LEFT,
    DESC("朝右")
    MOVE_DIR_RIGHT,
};

DESC("BUFF类型")
ENUM BUFF_TYPE
{
	DESC("增加BUFF")
	BUFF_ADD = 0,
	DESC("移除BUFF")
	BUFF_REMOVE,
	DESC("叠加")
	BUFF_OVERLAY,
	DESC("递减")
	BUFF_DECREASE,
};

DESC("设置技能标志类型")
ENUM SPELLFLAG_TYPE
{
	DESC("设置")
	SPELLFLAG_SET = 0,
	DESC("增加,减少有上下限值")
	SPELLFLAG_ADD,
	DESC("增加,减少无上下限值")
	SPELLFLAG_ADD_INFINITE,
};

DESC("冷却类型")
ENUM FREEZE_TYPE
{
	DESC("冷却设置-单个")
	FREEZE_SET = 0,
	DESC("冷却清除-单个")
	FREEZE_CLEAN,
	DESC("冷却设置-百分比-单个")
	FREEZE_SET_RATE,
	DESC("冷却设置-百分比-组")
	FREEZE_SET_RATE_CLASS,
    DESC("冷却单次增加")
    FREEZE_ONCE_ADD,
    DESC("冷却清除某一类")
    FREEZE_CLASS,
    DESC("冷却清除所有")
    FREEZE_ALL,
};

DESC("抵挡伤害类型")
ENUM RESISTDAMAGE_TYPE
{
	DESC("抵挡伤害百分比(系数/100)")
	RESISTDAMAGE_PCT = 0,
	DESC("抵挡伤害值(系数)")
	RESISTDAMAGE_VALUE,
	DESC("抵挡伤害总值(系数)")
	RESISTDAMAGE_TOTALVALUE,
	DESC("正面抵挡伤害(系数)")
	RESISTDAMAGE_POSITIVE_RESIST,
	DESC("抵挡伤害总值(生命值*系数)")
	RESISTDAMAGE_TOTALVALUE_HP,
	DESC("抵挡伤害总值(物攻*系数)")
	RESISTDAMAGE_TOTALVALUE_PA,
	DESC("抵挡伤害总值(法攻*系数)")
	RESISTDAMAGE_TOTALVALUE_MA,
	DESC("抵挡伤害总值(物防*系数)")
	RESISTDAMAGE_TOTALVALUE_PD,
	DESC("抵挡伤害总值(法防*系数)")
	RESISTDAMAGE_TOTALVALUE_MD,
    DESC("抵挡伤害总值(等级*系数)")
    RESISTDAMAGE_TOTALVALUE_LEVEL,
    DESC("抵挡伤害总值(最大生命值*系数)")
    RESISTDAMAGE_TOTALVALUE_MAX_HP,
};

DESC("怪物点类型")
ENUM MONSTER_POS_TYPE
{
	DESC("配置位置")
	MONSTER_POS_STATIC = 0,
	DESC("自己周围")
	MONSTER_POS_SELF,
	DESC("目标ID周围")
	MONSTER_POS_TAGETID,
	DESC("目标点周围")
	MONSTER_POS_TAGETILE,
};

DESC("回赠类型")
ENUM FEEDBACK_TYPE
{
	DESC("血量")
	FEEDBACK_HP	= 0x0,
};

DESC("技能查找类型")
ENUM SPELL_FIND_TYPE
{
	DESC("技能部件获取")
	SPELL_FIND_SPELL_PART = 0,
	DESC("技能工厂获取")
	SPELL_FIND_SPELL_FACTORY,
};

DESC("检查类型")
ENUM CHECK_TYPE
{
	DESC("小于百分比血量")
	CHECK_LESS_PCT_HP = 0,
	DESC("小于固定血量")
	CHECK_LESS_HP,
	DESC("大于百分比血量")
	CHECK_GREATER_PCT_HP,
	DESC("大于固定血量")
	CHECK_GREATER_HP,
	DESC("不检测血量")
	CHECK_NO_CHECK_HP,
    DESC("最大血量小于固定值")
    CHECK_MAX_HP_LESS_THAN,
    DESC("最大血量大于固定值")
    CHECK_MAX_HP_GREATER_THAN,
};

DESC("影响攻击类型")
ENUM EXTRAATTACK_TYPE
{
	DESC("物理攻击")
	EXTRAATTACK_PA = 0,
	DESC("法术攻击")
	EXTRAATTACK_MA,
	DESC("英雄等级")
	EXTRAATTACK_LEVEL,
	DESC("当前生命")
	EXTRAATTACK_HP,
	DESC("最大生命")
	EXTRAATTACK_MAX_HP,
	DESC("损失生命")
	EXTRAATTACK_LOSE_HP,
	DESC("损失生命百分比-扩大100倍")
	EXTRAATTACK_LOSE_HP_PCT,
	DESC("当前法力")
	EXTRAATTACK_MP,
	DESC("最大法力")
	EXTRAATTACK_MAX_MP,
	DESC("损失法力百分比-扩大100倍")
	EXTRAATTACK_LOSE_MP_PCT,
    DESC("当前魔抗")
    EXTRAATTACK_MD,
    DESC("当前物抗")
    EXTRAATTACK_PD,
    DESC("移动速度")
    EXTRAATTACK_SD,
    DESC("额外物理攻击")
    EXTRAATTACK_EXTRA_PA,
    DESC("额外法术攻击")
    EXTRAATTACK_EXTRA_MA,
};

DESC("治疗类型")
ENUM CURE_TYPE
{		
	DESC("血量")
	CURE_HP = 0,
	DESC("魔法")
	CURE_MP,
};

DESC("施法技能类型")
ENUM CAST_SPELL_TYPE
{		
	DESC("施法技能-攻击")
	CAST_SPELL_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
	DESC("施法技能-被击")
	CAST_SPELL_DAMAGE = ENTITYEVENT_KEY::EVENT_ENTITY_DAMAGE,
};

DESC("使用技能点类型")
ENUM USE_SPELL_POS_TYPE
{		
	DESC("使用技能点-技能位置")
	USE_SPELL_POS_TILE = 0,
	DESC("使用技能点-自己位置")
	USE_SPELL_POS_SELF,
	DESC("使用技能点-目标位置")
	USE_SPELL_POS_TARGET,
    DESC("使用技能点-人物面向")
    USE_SPELL_POS_ANGLE,
    DESC("使用技能点-继承上个技能点")
    USE_SPELL_POS_LAST_SPELL,
};

DESC("攻击增加Buff类型")
ENUM ATTACK_ADD_BUFF_TYPE
{		
	DESC("攻击增加Buff-攻击")
	ATTACK_ADD_BUFF_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
	DESC("攻击增加Buff-施法技能")
	ATTACK_ADD_BUFF_CAST_SPELL = ENTITYEVENT_KEY::EVENT_ENTITY_CAST_SPELL,
	DESC("攻击增加Buff-打出伤害")
	ATTACK_ADD_BUFF_DAMAGE = ENTITYEVENT_KEY::EVENT_ENTITY_MAX + GAMEEVENT_KEY::EVENT_GAME_ENTITY_DAMAGE,
};

DESC("击杀目标位置类型")
ENUM KILL_TARGET_LOC_TYPE
{		
	DESC("击杀目标-击杀者位置")
	KILL_TARGET_LOC_KILL = 0,
	DESC("击杀目标-死亡者位置")
	KILL_TARGET_LOC_DIE,
};

DESC("替换槽位类型")
ENUM REPLACE_SLOT_TYPE
{		
	DESC("替换技能")
	REPLACE_SLOT_SPELL = 0,
	DESC("替换图标")
	REPLACE_SLOT_ICON,
};

DESC("属性转换类型")
ENUM PROPERTY_TRANSFROM_TYPE
{		
	DESC("最大生命")
	PROPERTY_TRANSFROM_MAX_HP = ENTITY_PROPERTY::PROPERTY_MAX_HP,
	DESC("最大魔法")
	PROPERTY_TRANSFROM_MAX_MP = ENTITY_PROPERTY::PROPERTY_MAX_MP,
	DESC("物理攻击")
	PROPERTY_TRANSFROM_PA = ENTITY_PROPERTY::PROPERTY_PA,
	DESC("法术攻击")
	PROPERTY_TRANSFROM_MA = ENTITY_PROPERTY::PROPERTY_MA,
	DESC("物理防御")
	PROPERTY_TRANSFROM_PD = ENTITY_PROPERTY::PROPERTY_PD,
	DESC("法术防御")
	PROPERTY_TRANSFROM_MD = ENTITY_PROPERTY::PROPERTY_MD,
	DESC("移动速度")
	PROPERTY_TRANSFROM_SD = ENTITY_PROPERTY::PROPERTY_SD,
	DESC("攻击速度")
	PROPERTY_TRANSFROM_PASD = ENTITY_PROPERTY::PROPERTY_PASD,
    DESC("普攻系数")
    PROPERTY_TRANSFROM_AF = ENTITY_PROPERTY::PROPERTY_AF,
	DESC("暴击概率")
	PROPERTY_TRANSFROM_CRC = ENTITY_PROPERTY::PROPERTY_CRC,
	DESC("当前生命")
	PROPERTY_TRANSFROM_HP = ENTITY_PROPERTY::PROPERTY_HP,
    DESC("附加血量")
    PROPERTY_TRANSFROM_APPEND_HP = ENTITY_PROPERTY::PROPERTY_APPEND_HP,
    DESC("附加魔法")
    PROPERTY_TRANSFROM_APPEND_MP = ENTITY_PROPERTY::PROPERTY_APPEND_MP,
    DESC("附加物理攻击")
    PROPERTY_TRANSFROM_APPEND_PA = ENTITY_PROPERTY::PROPERTY_APPEND_PA,
    DESC("附加魔法攻击")
    PROPERTY_TRANSFROM_APPEND_MA = ENTITY_PROPERTY::PROPERTY_APPEND_MA,
    DESC("附加物理防御")
    PROPERTY_TRANSFROM_APPEND_PD = ENTITY_PROPERTY::PROPERTY_APPEND_PD,
    DESC("附加法术防御")
    PROPERTY_TRANSFROM_APPEND_MD = ENTITY_PROPERTY::PROPERTY_APPEND_MD,
    DESC("附加移动速度")
    PROPERTY_TRANSFROM_APPEND_SD = ENTITY_PROPERTY::PROPERTY_APPEND_SD,
    DESC("附加攻击速度")
    PROPERTY_TRANSFROM_APPEND_PASD = ENTITY_PROPERTY::PROPERTY_APPEND_PASD,
    DESC("附加普攻系数")
    PROPERTY_TRANSFROM_APPEND_AF = ENTITY_PROPERTY::PROPERTY_APPEND_AF,
    DESC("附加暴击概率")
    PROPERTY_TRANSFROM_APPEND_CRC = ENTITY_PROPERTY::PROPERTY_APPEND_CRC,
    DESC("物理防御穿透")
    PROPERTY_TRANSFROM_PDP = ENTITY_PROPERTY::PROPERTY_PDP,
    DESC("百分比物理防御穿透")
    PROPERTY_TRANSFROM_PCT_PDP = ENTITY_PROPERTY::PROPERTY_PCT_PDP,
    DESC("法术防御穿透")
    PROPERTY_TRANSFROM_MDP = ENTITY_PROPERTY::PROPERTY_MDP,
    DESC("百分比法术防御穿透")
    PROPERTY_TRANSFROM_PCT_MDP = ENTITY_PROPERTY::PROPERTY_PCT_MDP,
	DESC("百分比普攻系数")
	PROPERTY_TRANSFROM_PCT_AF = ENTITY_PROPERTY::PROPERTY_PCT_AF,
	DESC("英雄等级")
	PROPERTY_TRANSFROM_HERO_LEVEL = ENTITY_PROPERTY::PROPERTY_LEVEL,
	DESC("损失生命")
	PROPERTY_TRANSFROM_LOSE_HP = ENTITY_PROPERTY::PROPERTY_MAX,
	DESC("损失生命百分比")
	PROPERTY_TRANSFROM_LOSE_HP_PCT,
    DESC("战场平均等级")
    PROPERTY_TRANSFROM_WAR_AVERAGE_LEVEL,
};

DESC("属性转换后类型")
ENUM PROPERTY_TRANSFROM_BACK_TYPE
{		
	DESC("附加血量")
	PROPERTY_TRANSFROM_BACK_APPEND_HP = ENTITY_PROPERTY::PROPERTY_APPEND_HP,
	DESC("附加百分比血量")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_HP = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_HP,
	DESC("附加魔法")
	PROPERTY_TRANSFROM_BACK_APPEND_MP = ENTITY_PROPERTY::PROPERTY_APPEND_MP,
	DESC("附加百分比魔法")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_MP = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_MP,
	DESC("附加物理攻击")
	PROPERTY_TRANSFROM_BACK_APPEND_PA = ENTITY_PROPERTY::PROPERTY_APPEND_PA,
	DESC("附加百分比物理攻击")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_PA = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_PA,
	DESC("附加法术攻击")
	PROPERTY_TRANSFROM_BACK_APPEND_MA = ENTITY_PROPERTY::PROPERTY_APPEND_MA,
	DESC("附加百分比法术攻击")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_MA = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_MA,
	DESC("附加物理防御")
	PROPERTY_TRANSFROM_BACK_APPEND_PD = ENTITY_PROPERTY::PROPERTY_APPEND_PD,
	DESC("附加百分比物理防御")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_PD = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_PD,
	DESC("附加法术防御")
	PROPERTY_TRANSFROM_BACK_APPEND_MD = ENTITY_PROPERTY::PROPERTY_APPEND_MD,
	DESC("附加百分比法术防御")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_MD = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_MD,
	DESC("附加移动速度")
	PROPERTY_TRANSFROM_BACK_APPEND_SD = ENTITY_PROPERTY::PROPERTY_APPEND_SD,
	DESC("附加百分比移动速度")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_SD = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_SD,
	DESC("附加攻击速度")
	PROPERTY_TRANSFROM_BACK_APPEND_PASD = ENTITY_PROPERTY::PROPERTY_APPEND_PASD,
	DESC("附加百分比攻击速度")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_PASD = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_PASD,
    DESC("附加普攻系数")
    PROPERTY_TRANSFROM_BACK_APPEND_AF = ENTITY_PROPERTY::PROPERTY_APPEND_AF,
    DESC("附加百分比普攻系数")
    PROPERTY_TRANSFROM_BACK_APPEND_PCT_AF = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_AF,
	DESC("附加移动暴击概率")
	PROPERTY_TRANSFROM_BACK_APPEND_CRC = ENTITY_PROPERTY::PROPERTY_APPEND_CRC,
	DESC("附加百分比移动暴击概率")
	PROPERTY_TRANSFROM_BACK_APPEND_PCT_CRC = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_CRC,
    DESC("百分比物理吸血")
    PROPERTY_TRANSFROM_BACK_PCT_PDRAINS = ENTITY_PROPERTY::PROPERTY_PCT_PDRAINS,
    DESC("百分比法术吸血")
    PROPERTY_TRANSFROM_BACK_PCT_MDRAINS = ENTITY_PROPERTY::PROPERTY_PCT_MDRAINS,
};

DESC("属性转换循环类型")
ENUM PROPERTY_TRANSFROM_LOOP_TYPE
{		
	DESC("最大生命")
	PROPERTY_TRANSFROM_LOOP_MAX_HP = ENTITY_PROPERTY::PROPERTY_MAX_HP,
	DESC("最大魔法")
	PROPERTY_TRANSFROM_LOOP_MAX_MP = ENTITY_PROPERTY::PROPERTY_MAX_MP,
	DESC("物理攻击")
	PROPERTY_TRANSFROM_LOOP_PA = ENTITY_PROPERTY::PROPERTY_PA,
	DESC("法术攻击")
	PROPERTY_TRANSFROM_LOOP_MA = ENTITY_PROPERTY::PROPERTY_MA,
	DESC("物理防御")
	PROPERTY_TRANSFROM_LOOP_PD = ENTITY_PROPERTY::PROPERTY_PD,
	DESC("法术防御")
	PROPERTY_TRANSFROM_LOOP_MD = ENTITY_PROPERTY::PROPERTY_MD,
	DESC("移动速度")
	PROPERTY_TRANSFROM_LOOP_SD = ENTITY_PROPERTY::PROPERTY_SD,
	DESC("攻击速度")
	PROPERTY_TRANSFROM_LOOP_PASD = ENTITY_PROPERTY::PROPERTY_PASD,
    DESC("普攻系数")
    PROPERTY_TRANSFROM_LOOP_AF = ENTITY_PROPERTY::PROPERTY_AF,
	DESC("暴击概率")
	PROPERTY_TRANSFROM_LOOP_CRC = ENTITY_PROPERTY::PROPERTY_CRC,
};

DESC("目标方向类型")
ENUM DIRECTION_TYPE
{
	DESC("前方")
	DIRECTION_FRONT = 0,
	DESC("后方")
	DIRECTION_BACK,
	DESC("左方")
	DIRECTION_LEFT,
	DESC("右方")
	DIRECTION_RIGHT,
	DESC("原地")
	DIRECTION_INSITU,
    DESC("原地随机")
    DIRECTION_INSITU_RAND,
};

DESC("改变属性类型")
ENUM CHANGE_PROPERTY_TYPE
{		
	DESC("当前生命")
	CHANGE_PROPERTY_HP = ENTITY_PROPERTY::PROPERTY_HP,
};

DESC("饮血抵挡效果类型")
ENUM DRINKING_BLOOD_TYPE
{		
	DESC("等级")
	DRINKING_BLOOD_LEVEL = ENTITY_PROPERTY::PROPERTY_LEVEL,
};

DESC("改变BUFF类型")
ENUM CHANGE_BUFF_TYPE
{		
	DESC("改变BUFF等级")
	CHANGE_BUFF_LEVEL = 0,
	DESC("改变BUFF时间")
	CHANGE_BUFF_TIME,
};

DESC("充能匹配类型")
ENUM CHARGED_MATCHING_TYPE
{		
	DESC("无")
	CHARGED_MATCHING_NULL = 0,
	DESC("攻击充能")
	CHARGED_MATCHING_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
};

DESC("充能类型")
ENUM CHARGED_TYPE
{		
	DESC("无")
	CHARGED_NULL = 0,
	DESC("移动充能")
	CHARGED_CLIENTOPT_MOVE_SYN,
};

DESC("充能一击释放类型")
ENUM CHARGED_STRIKE_TYPE
{
	DESC("充满释放 无用")
	CHARGED_STRIKE_FILL_CAST = 0,
	DESC("施法技能释放")
	CHARGED_STRIKE_CAST_SPELL = ENTITYEVENT_KEY::EVENT_ENTITY_CAST_SPELL,
};

DESC("BUFF效果改变类型")
ENUM BUFF_EFFECT_CHANGE_TYPE
{
	DESC("附加移动速度")
	BUFF_EFFECT_CHANGE_APPEND_SD = ENTITY_PROPERTY::PROPERTY_APPEND_SD,
	DESC("附加百分比移动速度")
	BUFF_EFFECT_CHANGE_APPEND_PCT_SD = ENTITY_PROPERTY::PROPERTY_APPEND_PCT_SD,	
};

DESC("Buff添加者类型")
ENUM ADD_BUFF_TARGET_TYPE
{		
	DESC("给带BUFF的自身实体添加BUFF")
	ADD_BUFF_TARGET_SELF = 0,
	DESC("给被杀者添加BUFF")
	ADD_BUFF_TARGET_KILLTARGET,
	DESC("给击杀者添加BUFF")
	ADD_BUFF_TARGET_OPERATOR,
	DESC("给周围人添加BUFF")
	ADD_BUFF_TARGET_OPERATORAROUND,
};

DESC("助攻增加BUFF类型")
ENUM ASSIST_ADD_BUFF_TYPE
{
	DESC("助攻者")
	ASSIST_ADD_BUFF_ASSIST = 0,
	DESC("击杀者")
	ASSIST_ADD_BUFF_KILL,
	DESC("死亡者")
	ASSIST_ADD_BUFF_DIE,
};

DESC("充能属性类型")
ENUM CHARGED_PROPERTY_TYPE
{		
	DESC("无")
	CHARGED_TRANSLATE_APPEND_NULL = 0,
	DESC("充能生命值")
	CHARGED_TRANSLATE_APPEND_HP= ENTITY_PROPERTY::PROPERTY_APPEND_HP,
	DESC("充能魔法值")
	CHARGED_TRANSLATE_APPEND_MP= ENTITY_PROPERTY::PROPERTY_APPEND_MP,
	DESC("充能物理攻击值")
	CHARGED_TRANSLATE_APPEND_PA= ENTITY_PROPERTY::PROPERTY_APPEND_PA,
	DESC("充能法术攻击值")
	CHARGED_TRANSLATE_APPEND_MA= ENTITY_PROPERTY::PROPERTY_APPEND_MA,
	DESC("充能物理防御")
	CHARGED_TRANSLATE_APPEND_PD= ENTITY_PROPERTY::PROPERTY_APPEND_PD,
	DESC("充能法术防御值")
	CHARGED_TRANSLATE_APPEND_MD= ENTITY_PROPERTY::PROPERTY_APPEND_MD,
	DESC("充能移动值")
	CHARGED_TRANSLATE_APPEND_SD= ENTITY_PROPERTY::PROPERTY_APPEND_SD,
	DESC("充能攻击速度")
	CHARGED_TRANSLATE_APPEND_PASD= ENTITY_PROPERTY::PROPERTY_APPEND_PASD,
    DESC("充能普攻系数")
    CHARGED_TRANSLATE_APPEND_AF= ENTITY_PROPERTY::PROPERTY_APPEND_AF,
	DESC("充能暴击值")
	CHARGED_TRANSLATE_APPEND_CRC= ENTITY_PROPERTY::PROPERTY_APPEND_CRC,
	DESC("充能血量回复")
	CHARGED_TRANSLATE_APPEND_HP_REPLY= ENTITY_PROPERTY::PROPERTY_APPEND_HP_REPLY,
	DESC("充能魔法回复")
	CHARGED_TRANSLATE_APPEND_MP_REPLY= ENTITY_PROPERTY::PROPERTY_APPEND_MP_REPLY,
};

DESC("充能类型标识")
ENUM CHARGED_CHOOSE_TYPE
{
	DESC("所有类型")
	CHARGED_TYPE_ALL					= 0x7FFFFFFF,
	DESC("技能打中人充能")
	CHARGED_ATTACK				        = 0x1,
	DESC("只要施放技能就充能")
	CHARGED_CAST_SPELL			        = 0x2,
	DESC("移动充能")
	CHARGED_MOVE			            = 0x4,
	DESC("时间充能")
	CHARGED_TIME						= 0x8,
	DESC("击杀充能")
	CHARGED_KILL						= 0x10,
    DESC("死亡范围充能")
    CHARGED_DIE_RANGE					= 0x20,
};	

DESC("时间充能类型")
ENUM CHARGED_TIME_TYPE
{		
	DESC("无")
	CHARGED_TIME_NULL = 0,
	DESC("时间充能")
	CHARGED_TIME_TIME,
};

DESC("技能方向类型")
ENUM SPELL_DIR_TYPE
{
	DESC("原点")
	SPELL_DIR_ORIGIN = 0,
	DESC("前方")
	SPELL_DIR_FRONT,
	DESC("后方")
	SPELL_DIR_REAR,
};

DESC("隐身时对队友显示形态")
ENUM STEALTH_TOFRIENDS_DISP_TYPE
{
    DESC("不隐形")
    STEALTH_NO = 0,
    DESC("半透")
    STEALTH_ALPHA = 1,
};

DESC("击退目标对象")
ENUM BEAT_BACK_TARGET_TYPE
{
	DESC("自己")
	BEAT_BACK_TARGET_TO_SELF = 0,
	DESC("操作者")
	BEAT_BACK_TARGET_TO_OPERATOR,
	DESC("目标")
	BEAT_BACK_TARGET_TO_TARGET,
};

DESC("检测目标范围类型")
ENUM CHECK_TARGET_RANGE_TYPE
{
    DESC("范围内")
    CHECK_TARGET_RANGE_INSIDE = 0,
    DESC("范围外")
    CHECK_TARGET_RANGE_OUTSIDE,
};

DESC("免疫效果类型")
ENUM IMMUNE_EFFECT_TYPE
{
    DESC("免疫吸血")
    IMMUNE_EFFECT_TYPE_DRAINS,
    DESC("免疫暴击")
    IMMUNE_EFFECT_TYPE_CRIT,
};

DESC("免疫效果类型(否决)")
ENUM IMMUNE_EFFECT_VOTE_TYPE
{
    DESC("免疫伤害")
    IMMUNE_EFFECT_PREPARE_DAMAGE = ENTITYEVENT_KEY::EVENT_ENTITY_PREPARE_DAMAGE,
    DESC("免疫治疗")
    IMMUNE_EFFECT_PREPARE_CURE = ENTITYEVENT_KEY::EVENT_ENTITY_PREPARE_CURE,
};

DESC("反弹类型")
ENUM REBOUND_TYPE
{
    DESC("反弹攻击")
    REBOUND_TYPE_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_PREPARE_DAMAGE,
    DESC("反弹伤害血量")
    REBOUND_TYPE_HP = ENTITYEVENT_KEY::EVENT_ENTITY_DAMAGE,
};

DESC("角度类型")
ENUM ANGLE_TYPE
{
    DESC("右向")
    ANGLE_RIGHT = 0,
    DESC("前向")
    ANGLE_FRONT,
    DESC("左向")
    ANGLE_LEFT,
    DESC("后向")
    ANGLE_BACK,
};


DESC("检测属性增加buff类型")
ENUM CHECK_PROPERTY_ADD_BUFF_TYPE
{		
    DESC("当前生命")
    CHECK_PROPERTY_ADD_BUFF_HP = 0,
    DESC("当前魔法")
    CHECK_PROPERTY_ADD_BUFF_MP,
    DESC("当前能量")
    CHECK_PROPERTY_ADD_BUFF_ENERGY,
    DESC("当前体力")
    CHECK_PROPERTY_ADD_BUFF_STAMINA,
    DESC("最大生命值")
    CHECK_PROPERTY_ADD_BUFF_MAX_HP,
};

DESC("距离伤害属性类型")
ENUM DISTANCE_DAMAGE_PROPERTY_TYPE
{
    DESC("物理攻击")
    DISTANCE_DAMAG_PROPERTY_PA = ENTITY_PROPERTY::PROPERTY_PA,
    DESC("法术攻击")
    DISTANCE_DAMAG_PROPERTY_MA = ENTITY_PROPERTY::PROPERTY_MA,
};

DESC("距离伤害目标类型")
ENUM DISTANCE_DAMAGE_LOC_TYPE
{
    DESC("自己")
    DISTANCE_DAMAGE_LOC_SELF = 0,
    DESC("操作者")
    DISTANCE_DAMAGE_LOC_OPERATOR,
    DESC("目标")
    DISTANCE_DAMAGE_LOC_TARGET,
};

DESC("累积伤害增加Buff类型")
ENUM ACCUMULATE_DAMAGE_ADD_BUFF_TYPE
{
    DESC("当前生命")
    ACCUMULATE_DAMAGE_ADD_BUFF_HP = ENTITY_PROPERTY::PROPERTY_HP,
    DESC("最大生命")
    ACCUMULATE_DAMAGE_ADD_BUFF_MAX_HP = ENTITY_PROPERTY::PROPERTY_MAX_HP,
    DESC("当前魔法")
    ACCUMULATE_DAMAGE_ADD_BUFF_MP = ENTITY_PROPERTY::PROPERTY_MP,
    DESC("最大魔法")
    ACCUMULATE_DAMAGE_ADD_BUFF_MAX_MP = ENTITY_PROPERTY::PROPERTY_MAX_MP,
    DESC("物理攻击")
    ACCUMULATE_DAMAGE_ADD_BUFF_PA = ENTITY_PROPERTY::PROPERTY_PA,
    DESC("法术攻击")
    ACCUMULATE_DAMAGE_ADD_BUFF_MA = ENTITY_PROPERTY::PROPERTY_MA,
    DESC("物理防御")
    ACCUMULATE_DAMAGE_ADD_BUFF_PD = ENTITY_PROPERTY::PROPERTY_PD,
    DESC("法术防御")
    ACCUMULATE_DAMAGE_ADD_BUFF_MD = ENTITY_PROPERTY::PROPERTY_MD,
    DESC("攻击速度")
    ACCUMULATE_DAMAGE_ADD_BUFF_SD = ENTITY_PROPERTY::PROPERTY_SD,
    DESC("攻击速度")
    ACCUMULATE_DAMAGE_ADD_BUFF_PASD = ENTITY_PROPERTY::PROPERTY_PASD,
    DESC("普攻系数")
    ACCUMULATE_DAMAGE_ADD_BUFF_AF = ENTITY_PROPERTY::PROPERTY_AF,
    DESC("暴击概率")
    ACCUMULATE_DAMAGE_ADD_BUFF_CRC = ENTITY_PROPERTY::PROPERTY_CRC,
};

DESC("累积伤害增加Buff类型")
ENUM MOVE_DAMAGE_TYPE
{
    DESC("伤害血量")
    MOVE_DAMAGE_HP = 0,
    DESC("伤害魔法")
    MOVE_DAMAGE_MP,
};

DESC("匹配技能类型")
ENUM MATHING_SPELL_TYPE
{
    DESC("施法技能")
    MATHING_SPELL_CAST_SPELL = ENTITYEVENT_KEY::EVENT_ENTITY_CAST_SPELL,
    DESC("攻击事件")
    MATHING_SPELL_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
};

DESC("检测Buff类型")
ENUM CHECK_BUFF_TYPE
{
    DESC("攻击事件")
    CHECK_BUFF_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
    DESC("施法技能")
    CHECK_BUFF_CAST_SPELL = ENTITYEVENT_KEY::EVENT_ENTITY_CAST_SPELL,
};

DESC("攻击效果类型")
ENUM ATTACK_EFFECT_TYPE
{
    DESC("暴击触发")
    ATTACK_EFFECT_CDC = 0,
};

DESC("持续伤害属性类型")
ENUM DAMAGE_PROPERTY_EFFECT_TYPE
{
    DESC("当前生命")
    DAMAGE_PROPERTY_EFFECT_HP = 0,
    DESC("最大生命")
    DAMAGE_PROPERTY_EFFECT_MAX_HP,
    DESC("损失生命")
    DAMAGE_PROPERTY_EFFECT_LOSE_HP,
};

DESC("扫射类型")
ENUM STRAFE_TYPE
{
    DESC("鼠标点")
    STRAFE_MOUSE_POS = 0,
    DESC("鼠标方向圆心旋转")
    STRAFE_MOUSE_CIRCLE_ROTATE,
};

DESC("镜头跟随类型")
ENUM STICKY_CAMERRA_TYPE
{
    DESC("自己")
    STICKY_CAMERRA_SELF = 0,
    DESC("操作者")
    STICKY_CAMERRA_OPERATOR,
    DESC("目标")
    STICKY_CAMERRA_TARGET,
};

DESC("事件改变属性类型")
ENUM EVENT_CHANGE_PROPERTY_TYPE
{
    DESC("施法技能")
    EVENT_CHANGE_CAST_SPELL = ENTITYEVENT_KEY::EVENT_ENTITY_CAST_SPELL,
};

DESC("光效源对象")
ENUM ADD_LIGHTING_SRC_TYPE
{
    DESC("自己")
    ADD_LIGHTING_SRC_SELF = 0,
    DESC("目标")
    ADD_LIGHTING_SRC_TARGET,
    DESC("操作者")
    ADD_LIGHTING_SRC_OPERATOR,
    DESC("主角")
    ADD_LIGHTING_SRC_MAINHERO,
    DESC("起点位置")
    ADD_LIGHTING_SRC_LOCATION,
};

DESC("光效目标对象")
ENUM ADD_LIGHTING_TARGET_TYPE
{
    DESC("目标")
    ADD_LIGHTING_TARGET_TARGET = 0,
    DESC("自己")
    ADD_LIGHTING_TARGET_SELF,
    DESC("操作者")
    ADD_LIGHTING_TARGET_OPERATOR,
    DESC("主角")
    ADD_LIGHTING_TARGET_MAINHERO,
    DESC("目标位置")
    ADD_LIGHTING_TARGET_LOCATION,
};

DESC("转向点类型")
ENUM TURN_TO_POS_TYPE
{
    DESC("使用技能点-自己位置")
    TURN_TO_POS_POS_SELF = 0,
    DESC("使用技能点-目标位置")
    TURN_TO_POS_TARGET,
    DESC("使用技能点-技能位置")
    TURN_TO_POS_TILE,
    DESC("使用技能点-操作者位置")
    TURN_TO_POS_OPERATOR,
};

DESC("假死给自己加Buff之Buff添加者")
ENUM APPARENT_DEATH_ADD_BUFF_TARGET_TYPE
{
    DESC("自己")
    APPARENT_DEATH_ADD_BUFF_TARGET_SELF = 0,
    DESC("击杀者")
    APPARENT_DEATH_ADD_BUFF_TARGET_OPERATOR,
    DESC("被击杀者(还是自己-)")
    APPARENT_DEATH_ADD_BUFF_TARGET_TARGET,
    DESC("假死效果添加者")
    APPARENT_DEATH_ADD_BUFF_TARGET_APPARENT_DEATH_EFFECT_OPERATOR,
};


DESC("选择目标类型")
ENUM SHOW_CHOOSE_TARGET_TYPE
{
    DESC("敌方英雄")
    SHOW_CHOOSE_TARGET_TYPE_HERO_ENEMY = 0,
    DESC("我方英雄")
    SHOW_CHOOSE_TARGET_TYPE_HERO_SELF,
    DESC("双方英雄")
    SHOW_CHOOSE_TARGET_TYPE_HERO,
    DESC("我方英雄[不含自己]")
    SHOW_CHOOSE_TARGET_TYPE_HERO_SELF_EXCLUDE_SELF,
    DESC("双方英雄[不含自己]")
    SHOW_CHOOSE_TARGET_TYPE_HERO_EXCLUDE_SELF,
};


DESC("提升伤害类型")
ENUM PROMOTE_DAMAGE_TYPE
{
    DESC("攻击事件")
    PROMOTE_DAMAGE_ATTACK = ENTITYEVENT_KEY::EVENT_ENTITY_ATTACK,
    DESC("伤害事件")
    PROMOTE_DAMAGE_PREPARE_DAMAGE = ENTITYEVENT_KEY::EVENT_ENTITY_DAMAGE,
};

DESC("被动位移类型")
ENUM PASSIVE_MOVE_TYPE
{
    DESC("默认类型")
    PASSIVE_MOVE_DEFAULT = 0,
    DESC("主动位移")
    PASSIVE_MOVE_NO,
    DESC("被动位移")
    PASSIVE_MOVE_YES,
};

DESC("单个技能数据")
ENUM SINGLE_SPELL_DATA
{
    DESC("技能ID")
    SINGLE_SPDATA_ID = SPELL_DATA_ID::SPDATA_ID,
    DESC("技能职业")
    SINGLE_SPDATA_VOCATION = SPELL_DATA_ID::SPDATA_VOCATION,
    DESC("技能类型")
    SINGLE_SPDATA_TYPE = SPELL_DATA_ID::SPDATA_TYPE,
    DESC("技能图标")
    SINGLE_SPDATA_ICON = SPELL_DATA_ID::SPDATA_ICON,
    DESC("准备时间")
    SINGLE_SPDATA_PREPARE_TIME = SPELL_DATA_ID::SPDATA_PREPARE_TIME,
    DESC("打断标志")
    SINGLE_SPDATA_BREAK_FLAG = SPELL_DATA_ID::SPDATA_BREAK_FLAG,
    DESC("持续时间")
    SINGLE_SPDATA_DURATION = SPELL_DATA_ID::SPDATA_DURATION,
    DESC("僵持时间")
    SINGLE_SPDATA_RIGIDITY = SPELL_DATA_ID::SPDATA_RIGIDITY,
    DESC("移动僵持时间")
    SINGLE_SPDATA_MOVE_RIGIDITY = SPELL_DATA_ID::SPDATA_MOVE_RIGIDITY,
    DESC("转向僵持时间")
    SINGLE_SPDATA_TURN_RIGIDITY = SPELL_DATA_ID::SPDATA_TURN_RIGIDITY,
    DESC("冷却ID")
    SINGLE_SPDATA_COOLID = SPELL_DATA_ID::SPDATA_COOLID,
    DESC("消耗法力")
    SINGLE_SPDATA_NEED_MP = SPELL_DATA_ID::SPDATA_NEED_MP,
    DESC("消耗体力")
    SINGLE_SPDATA_NEED_STAMINA = SPELL_DATA_ID::SPDATA_NEED_STAMINA,
    DESC("消耗能量")
    SINGLE_SPDATA_NEED_ENERGY = SPELL_DATA_ID::SPDATA_NEED_ENERGY,
    DESC("技能威力")
    SINGLE_SPDATA_POWER = SPELL_DATA_ID::SPDATA_POWER,
    DESC("攻击百分比(float)")
    SINGLE_SPDATA_ATTACK_PCT = SPELL_DATA_ID::SPDATA_ATTACK_PCT,
    DESC("穿透百分比(float)")
    SINGLE_SPDATA_PENETRATION_PCT = SPELL_DATA_ID::SPDATA_PENETRATION_PCT,
    DESC("固定仇恨值")
    SINGLE_SPDATA_STOCK_ENMITY = SPELL_DATA_ID::SPDATA_STOCK_ENMITY,
    DESC("仇恨值百分比")
    SINGLE_SPDATA_ENMITY_PCT = SPELL_DATA_ID::SPDATA_ENMITY_PCT,
    DESC("选择目标类型")
    SINGLE_SPDATA_SELECT_TARGET = SPELL_DATA_ID::SPDATA_SELECT_TARGET,
    DESC("目标类型")
    SINGLE_SPDATA_TARGET = SPELL_DATA_ID::SPDATA_TARGET,
    DESC("伤害类型(魔法or物理)")
    SINGLE_SPDATA_DAMAGE_TYPE = SPELL_DATA_ID::SPDATA_DAMAGE_TYPE,
    DESC("技能效果类型")
    SINGLE_SPDATA_SPELL_EFFECT_TYPE = SPELL_DATA_ID::SPDATA_SPELL_EFFECT_TYPE,
    DESC("命中时间")
    SINGLE_SPDATA_HIT_TIME = SPELL_DATA_ID::SPDATA_HIT_TIME,
    DESC("攻击类型")
    SINGLE_SPDATA_ATTACK_TYPE = SPELL_DATA_ID::SPDATA_ATTACK_TYPE,
    DESC("攻击次数")
    SINGLE_SPDATA_ATTACK_COUNT = SPELL_DATA_ID::SPDATA_ATTACK_COUNT,
    DESC("攻击时间")
    SINGLE_SPDATA_ATTACK_TIME = SPELL_DATA_ID::SPDATA_ATTACK_TIME,
    DESC("同目标伤害次数")
    SINGLE_SPDATA_TARGET_DAMAGE_COUNT = SPELL_DATA_ID::SPDATA_TARGET_DAMAGE_COUNT,
    DESC("最大攻击目标数量")
    SINGLE_SPDATA_TARGET_COUNT = SPELL_DATA_ID::SPDATA_TARGET_COUNT,
    DESC("选择范围(float)")
    SINGLE_SPDATA_CHOOSE_RANGE = SPELL_DATA_ID::SPDATA_CHOOSE_RANGE,
    DESC("攻击范围(float)")
    SINGLE_SPDATA_ATTACK_RANGE = SPELL_DATA_ID::SPDATA_ATTACK_RANGE,
    DESC("攻击衰减(float)")
    SINGLE_SPDATA_ATTACK_DECLINE = SPELL_DATA_ID::SPDATA_ATTACK_DECLINE,
    DESC("攻击衰减上限(float)")
    SINGLE_SPDATA_ATTACK_DECLINE_LIMIT = SPELL_DATA_ID::SPDATA_ATTACK_DECLINE_LIMIT,
    DESC("技能距离(float)")
    SINGLE_SPDATA_DISTANCE = SPELL_DATA_ID::SPDATA_DISTANCE,
    DESC("飞行速度(float)")
    SINGLE_SPDATA_FLYING_SPEED = SPELL_DATA_ID::SPDATA_FLYING_SPEED,
    DESC("使用技能高度(float)")
    SINGLE_SPDATA_USE_HEIGHT = SPELL_DATA_ID::SPDATA_USE_HEIGHT,
    DESC("技能攻击高度(float)")
    SINGLE_SPDATA_ATTACK_HEIGHT = SPELL_DATA_ID::SPDATA_ATTACK_HEIGHT,
    DESC("死亡效果类型")
    SINGLE_SPDATA_DEAD_EFFECT_TYPE = SPELL_DATA_ID::SPDATA_DEAD_EFFECT_TYPE,
    DESC("技能默认选择类型")
    SINGLE_SPDATA_DEFAULT_SELECT_TYPE = SPELL_DATA_ID::SPDATA_DEFAULT_SELECT_TYPE,
	DESC("技能智能施法选择类型")
	SINGLE_SPDATA_SMART_CAST_SELECT_TYPE = SPELL_DATA_ID::SPDATA_SMART_SELECT_TYPE,
	DESC("技能选择类型")
    SINGLE_SPDATA_SELECT_TYPE = SPELL_DATA_ID::SPDATA_SELECT_TYPE,
    DESC("技能快捷施法选择类型")
    SINGLE_SPDATA_SPEED_CAST_SELECT_TYPE = SPELL_DATA_ID::SPDATA_SPEED_SELECT_TYPE,
    DESC("技能使用类型")
    SINGLE_SPDATA_CAST_TYPE = SPELL_DATA_ID::SPDATA_CAST_TYPE,
    DESC("技能使用标识")
    SINGLE_SPDATA_CAST_FLAG = SPELL_DATA_ID::SPDATA_CAST_FLAG,
    DESC("技能被动事件")
    SINGLE_SPDATA_PASSIVE_EVENT = SPELL_DATA_ID::SPDATA_PASSIVE_EVENT,
    DESC("技能标识")
    SINGLE_SPDATA_FLAG = SPELL_DATA_ID::SPDATA_FLAG,
    DESC("技能命令优先级")
    SINGLE_SPDATA_COMMAND_LEVEL = SPELL_DATA_ID::SPDATA_COMMAND_LEVEL,
    DESC("技能描画类型")
    SINGLE_SPDATA_DRAW_TYPE = SPELL_DATA_ID::SPDATA_DRAW_TYPE,
};

DESC("单个技能字符串数据")
ENUM SINGLE_STR_SPELL_DATA
{
    DESC("技能名字")
    SINGLE_STR_SPDATA_NAME = SPELL_DATA_ID::SPDATA_NAME,
    DESC("技能描述")
    SINGLE_STR_SPDATA_DESC = SPELL_DATA_ID::SPDATA_DESC,
    DESC("预备光效")
    SINGLE_STR_SPDATA_PREPARE_LIGHTING = SPELL_DATA_ID::SPDATA_PREPARE_LIGHTING,
    DESC("施法光效")
    SINGLE_STR_SPDATA_CAST_LIGHTING = SPELL_DATA_ID::SPDATA_CAST_LIGHTING,
    DESC("被击光效")
    SINGLE_STR_SPDATA_DAMAGE_LIGHTING = SPELL_DATA_ID::SPDATA_DAMAGE_LIGHTING,
    DESC("怪物被击光效")
    SINGLE_STR_SPDATA_MONSTER_DAMAGE_LIGHTING = SPELL_DATA_ID::SPDATA_MONSTER_DAMAGE_LIGHTING,
    DESC("预备动画名字")
    SINGLE_STR_SPDATA_PREPARE_ANIMATION = SPELL_DATA_ID::SPDATA_PREPARE_ANIMATION,
    DESC("施法动画名字")
    SINGLE_STR_SPDATA_CAST_ANIMATION = SPELL_DATA_ID::SPDATA_CAST_ANIMATION,
    DESC("被击动画名字")
    SINGLE_STR_SPDATA_DAMAGE_ANIMATION = SPELL_DATA_ID::SPDATA_DAMAGE_ANIMATION,
    DESC("怪物被击动画名字")
    SINGLE_STR_SPDATA_MONSTER_DAMAGE_ANIMATION = SPELL_DATA_ID::SPDATA_MONSTER_DAMAGE_ANIMATION,
    DESC("预备音效")
    SINGLE_SPDATA_PREPARE_SOUND = SPELL_DATA_ID::SPDATA_PREPARE_SOUND,
    DESC("施法音效")
    SINGLE_SPDATA_CAST_SOUND = SPELL_DATA_ID::SPDATA_CAST_SOUND,
    DESC("被击音效")
    SINGLE_SPDATA_DAMAGE_SOUND = SPELL_DATA_ID::SPDATA_DAMAGE_SOUND,
    DESC("击中音效")
    SINGLE_SPDATA_HIT_SOUND = SPELL_DATA_ID::SPDATA_HIT_SOUND,
};

DESC("增加属性上限类型")
ENUM ADD_PROPERTY_LIMIT_TYPE
{		
    DESC("血量")
    ADD_PROPERTY_LIMIT_APPEND_HP = ENTITY_PROPERTY::PROPERTY_APPEND_HP,
    DESC("魔法")
    ADD_PROPERTY_LIMIT_APPEND_MP = ENTITY_PROPERTY::PROPERTY_APPEND_MP,
    DESC("能量")
    ADD_PROPERTY_LIMIT_APPEND_ENERGY = ENTITY_PROPERTY::PROPERTY_APPEND_ENERGY,
    DESC("体力")
    ADD_PROPERTY_LIMIT_MAX_STAMINA = ENTITY_PROPERTY::PROPERTY_MAX_STAMINA,
};

DESC("增加属性类型")
ENUM ADD_PROPERTY_TYPE
{
    DESC("经验")
    ADD_PROPERTY_EXP = ENTITY_PROPERTY::PROPERTY_EXP,
};

DESC("随机增加BUFF类型")
ENUM RAND_ADD_BUFF_TYPE
{
    DESC("正常增加")
    RAND_ADD_BUFF_NONAL = 0,
    DESC("先加最近")
    RAND_ADD_BUFF_NEAR,
    DESC("先加血量最少")
    RAND_ADD_BUFF_HP_LEAST,
};

DESC("延迟使用技能点类型")
ENUM DELAY_USE_SPELL_POS_TYPE
{		
    DESC("自己位置")
    DELAY_USE_SPELL_POS_SELF,
    DESC("目标位置")
    DELAY_USE_SPELL_POS_TARGET,
    DESC("技能的起点位置")
    DELAY_USE_SPELL_POS_START_TILE,
    DESC("技能的目标点位置")
    DELAY_USE_SPELL_POS_TARGET_TILE,
};

DESC("选择点")
ENUM CHOOS_POS_TYPE
{		
    DESC("选择点-技能位置")
    CHOOS_POS_TILE = 0,
    DESC("选择点-自己位置")
    CHOOS_POS_SELF,
    DESC("选择点-目标位置")
    CHOOS_POS_TARGET,
    DESC("选择点-操作者位置")
    CHOOS_POS_OPERATOR,
    DESC("选择点-人物面向")
    UCHOOS_POS_ANGLE,
    DESC("选择点-操作者目标方向")
    UCHOOS_POS_OPERATOR_TARGET_DIR,
    DESC("选择点-目标操作者方向")
    UCHOOS_POS_TARGET_OPERATOR_DIR,
};

DESC("分身怪物点类型")
ENUM REPLICATION_MONSTER_POS_TYPE
{
    DESC("自己点")
    REPLICATION_MONSTER_POS_SELF = 0,
    DESC("目标点")
    REPLICATION_MONSTER_POS_TARGET,
    DESC("操作者位置")
    REPLICATION_MONSTER_POS_OPERATOR,
    DESC("技能位置")
    REPLICATION_MONSTER_POS_TILE,
};

DESC("天赋类型")
ENUM EFFECT_TALENT_TYPE
{		
    DESC("激活天赋")
    EFFECT_ACTIVE_TALENT = 0,
    DESC("取消天赋")
    EFFECT_DE_ACTIVE_TALENT,
};

DESC("距离增加BUFF类型")
ENUM DISTANCE_ADD_BUFF_TYPE
{		
    DESC("距离增加BUFF-技能使用起点")
    DISTANCE_ADD_BUFF_SPELL_START = 0,
    DESC("距离增加BUFF-技能位置")
    DISTANCE_ADD_BUFF_SPELL_TILE,
    DESC("距离增加BUFF-自己位置")
    DISTANCE_ADD_BUFF_SELF,
    DESC("距离增加BUFF-目标位置")
    DISTANCE_ADD_BUFF_TARGET,
};

DESC("选择范围类型")
ENUM CHOOSE_RANGE_TYPE
{
    DESC("选择范围-扇形")
    CHOOSE_RANGE_SECTOR = 0,
    DESC("选择范围-直线")
    CHOOSE_RANGE_LINE,
    DESC("选择范围-圆形")
    CHOOSE_RANGE_AOE,
};

DESC("翅膀属性类型")
ENUM SET_WING_TYPE
{
    DESC("速度")
    SET_WING_SPEED = 0,
    DESC("加速度")
    SET_WING_ACCELERATION,
    DESC("最高速度")
    SET_WING_MAX_SPEED,
    DESC("上升速度")
    SET_WING_UP_SPEED,
    DESC("最小飞行高度")
    SET_WING_MIN_FLY_HEIGHT,
    DESC("最高飞行高度")
    SET_WING_MAX_FLY_HEIGHT,
    DESC("镜头最小仰角")
    SET_WING_MIN_CAMERA_ANGLE,
    DESC("镜头最大仰角")
    SET_WING_MAX_CAMERA_ANGLE,
    DESC("起飞需要体力")
    SET_WING_FLY_NEED_STAMINA,
    DESC("飞行消耗体力")
    SET_WING_FLY_COST_STAMINA,
    DESC("加速飞行需要体力")
    SET_WING_ACCELERATION_NEED_STAMINA,
    DESC("加速飞行消耗体力")
    SET_WING_ACCELERATION_COST_STAMINA,
    DESC("退出加速飞行体力")
    SET_WING_EXIT_ACCELERATION_STAMINA,
    DESC("降落体力")
    SET_WING_FLOOR_STAMINA,
};

DESC("攻击/受击")
ENUM ATTACK_OR_BEHIT
{
    DESC("攻击")
    AOB_ATTACK,
    DESC("受击")
    AOB_BEHIT,
};

DESC("效果MASK标识")
ENUM EFFECT_MASK
{
    DESC("缺省默认值")
    EFFECT_MASK_DEFAULT = 0x00000000,
    DESC("死亡")
    EFFECT_MASK_DIE     = 0x00000001,
};

DESC("开关子弹面板")
ENUM OPEN_OR_CLOSE_BULLET_PANEL
{
	DESC("关")
	CLOSE_BULLET_PANEL,
	DESC("开")
	OPEN_BULLET_PANEL,
};

DESC("结界功能")
ENUM BarrierBlockType
{
    DESC("无")
    BARRIER_BLOCK_NONE,
    DESC("阻挡移动")
    BARRIER_BLOCK_MOVE,  
    DESC("阻挡技能")
    BARRIER_BLOCK_SPELL, 
};

DESC("结界形状")
ENUM BarrierShape
{
    DESC("圆环")
    BARRIER_SHAPE_CIRCLE,
    DESC("直线")
    BARRIER_SHAPE_LINE,
    DESC("圆柱体")
    BARRIER_SHAPE_CYLINDER,
};


#endif	// __EFFCTCOMMON_MANAGEDDEF_H__