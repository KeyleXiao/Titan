#include <stdio.h>
#include <fstream>
#include <Windows.h>
using namespace std;

#define gbyte unsigned char
#define guint unsigned int

static int ecryptConfigData_impl(gbyte* buffer, guint len, guint key)
{
	static const unsigned char ecode_buf[256] = {
		0x4A, 0x04, 0x0D, 0xAF, 0xB4, 0xCF, 0x12, 0xCE, 0x1A, 0x37, 0x61, 0x39, 0x60, 0x95, 0xBE, 0x25,
		0xE4, 0x6E, 0xFC, 0x1B, 0xE7, 0x49, 0xE6, 0x67, 0xF6, 0xC5, 0xCB, 0x2F, 0x27, 0xD4, 0x68, 0xB2,
		0x01, 0x52, 0xD0, 0x46, 0x11, 0x20, 0xFB, 0x9D, 0xA9, 0x02, 0xF5, 0x8F, 0x3D, 0x82, 0xD3, 0xFF,
		0x0B, 0xB8, 0xF2, 0x4D, 0x8E, 0x81, 0x2C, 0xAB, 0x5F, 0xC4, 0x41, 0x29, 0x40, 0xFA, 0xC0, 0xBF,
		0x33, 0x10, 0x21, 0x16, 0xB0, 0x71, 0x83, 0x96, 0x8D, 0x2B, 0x23, 0x3B, 0xF9, 0xC1, 0xE5, 0x72,
		0xE2, 0x1C, 0x26, 0xF0, 0x73, 0x36, 0x63, 0x56, 0x31, 0x4E, 0x6B, 0x55, 0x62, 0x79, 0xC6, 0x91,
		0x00, 0x35, 0xB1, 0x2A, 0xA6, 0x42, 0xDF, 0xEB, 0x3C, 0x51, 0xEA, 0x97, 0x57, 0x94, 0x8C, 0x80,
		0x34, 0x5C, 0xD2, 0x76, 0xA4, 0xE9, 0x85, 0xE8, 0xBB, 0x78, 0xE0, 0xB5, 0xAD, 0x0F, 0x87, 0x70,
		0xDD, 0xAE, 0xF4, 0xD9, 0x66, 0x54, 0x6F, 0xCC, 0x4C, 0x77, 0x3E, 0xCD, 0xF1, 0x75, 0x0A, 0xA1,
		0x28, 0x9B, 0x9A, 0x7E, 0x4B, 0x98, 0x99, 0x47, 0xFE, 0xA5, 0xF7, 0xB7, 0xA3, 0xE1, 0x9F, 0xBC,
		0x93, 0x44, 0x3A, 0x08, 0x89, 0x22, 0xEE, 0xB9, 0x45, 0xD6, 0x06, 0x09, 0xC9, 0xBD, 0x14, 0x0C,
		0xB6, 0x5E, 0x9C, 0x7A, 0x65, 0x59, 0xAA, 0x19, 0x5B, 0x7C, 0x18, 0x43, 0x92, 0x13, 0x15, 0x7B,
		0xED, 0xD5, 0xC7, 0x17, 0xEF, 0x86, 0x90, 0xC2, 0x74, 0x64, 0xF3, 0xDC, 0x6C, 0x38, 0x05, 0x1D,
		0xC8, 0x0E, 0xEC, 0x6A, 0x32, 0xDA, 0xD7, 0xC3, 0xDB, 0x8B, 0x24, 0xB3, 0x5D, 0x2E, 0xBA, 0xA2,
		0xD8, 0x03, 0x88, 0x7D, 0x7F, 0x69, 0x8A, 0xFD, 0xCA, 0x4F, 0x30, 0x9E, 0xA0, 0xD1, 0x5A, 0x53,
		0xDE, 0x3F, 0x84, 0xAC, 0xF8, 0xA7, 0x2D, 0x1F, 0x1E, 0xE3, 0x58, 0x50, 0x6D, 0x48, 0x07, 0xA8,
	};
	int encryptIndex;
	unsigned char *tempMemory = (unsigned char *)buffer;
	for (encryptIndex = 0; encryptIndex < len; encryptIndex++)
	{
		tempMemory[encryptIndex] ^= 3;
		tempMemory[encryptIndex] = ecode_buf[tempMemory[encryptIndex]];
		
	}
	return 1;
}

static int decryptConfigData_impl(gbyte* buffer, guint len, guint key)
{
	static const unsigned char decode_buf[256] = {
		0x60, 0x20, 0x29, 0xE1, 0x01, 0xCE, 0xAA, 0xFE, 0xA3, 0xAB, 0x8E, 0x30, 0xAF, 0x02, 0xD1, 0x7D,
		0x41, 0x24, 0x06, 0xBD, 0xAE, 0xBE, 0x43, 0xC3, 0xBA, 0xB7, 0x08, 0x13, 0x51, 0xCF, 0xF8, 0xF7,
		0x25, 0x42, 0xA5, 0x4A, 0xDA, 0x0F, 0x52, 0x1C, 0x90, 0x3B, 0x63, 0x49, 0x36, 0xF6, 0xDD, 0x1B,
		0xEA, 0x58, 0xD4, 0x40, 0x70, 0x61, 0x55, 0x09, 0xCD, 0x0B, 0xA2, 0x4B, 0x68, 0x2C, 0x8A, 0xF1,
		0x3C, 0x3A, 0x65, 0xBB, 0xA1, 0xA8, 0x23, 0x97, 0xFD, 0x15, 0x00, 0x94, 0x88, 0x33, 0x59, 0xE9,
		0xFB, 0x69, 0x21, 0xEF, 0x85, 0x5B, 0x57, 0x6C, 0xFA, 0xB5, 0xEE, 0xB8, 0x71, 0xDC, 0xB1, 0x38,
		0x0C, 0x0A, 0x5C, 0x56, 0xC9, 0xB4, 0x84, 0x17, 0x1E, 0xE5, 0xD3, 0x5A, 0xCC, 0xFC, 0x11, 0x86,
		0x7F, 0x45, 0x4F, 0x54, 0xC8, 0x8D, 0x73, 0x89, 0x79, 0x5D, 0xB3, 0xBF, 0xB9, 0xE3, 0x93, 0xE4,
		0x6F, 0x35, 0x2D, 0x46, 0xF2, 0x76, 0xC5, 0x7E, 0xE2, 0xA4, 0xE6, 0xD9, 0x6E, 0x48, 0x34, 0x2B,
		0xC6, 0x5F, 0xBC, 0xA0, 0x6D, 0x0D, 0x47, 0x6B, 0x95, 0x96, 0x92, 0x91, 0xB2, 0x27, 0xEB, 0x9E,
		0xEC, 0x8F, 0xDF, 0x9C, 0x74, 0x99, 0x64, 0xF5, 0xFF, 0x28, 0xB6, 0x37, 0xF3, 0x7C, 0x81, 0x03,
		0x44, 0x62, 0x1F, 0xDB, 0x04, 0x7B, 0xB0, 0x9B, 0x31, 0xA7, 0xDE, 0x78, 0x9F, 0xAD, 0x0E, 0x3F,
		0x3E, 0x4D, 0xC7, 0xD7, 0x39, 0x19, 0x5E, 0xC2, 0xD0, 0xAC, 0xE8, 0x1A, 0x87, 0x8B, 0x07, 0x05,
		0x22, 0xED, 0x72, 0x2E, 0x1D, 0xC1, 0xA9, 0xD6, 0xE0, 0x83, 0xD5, 0xD8, 0xCB, 0x80, 0xF0, 0x66,
		0x7A, 0x9D, 0x50, 0xF9, 0x10, 0x4E, 0x16, 0x14, 0x77, 0x75, 0x6A, 0x67, 0xD2, 0xC0, 0xA6, 0xC4,
		0x53, 0x8C, 0x32, 0xCA, 0x82, 0x2A, 0x18, 0x9A, 0xF4, 0x4C, 0x3D, 0x26, 0x12, 0xE7, 0x98, 0x2F,
	};
	int encryptIndex;
	unsigned char *tempMemory = (unsigned char *)buffer;
	for (encryptIndex = 0; encryptIndex < len; encryptIndex++)
	{
		tempMemory[encryptIndex] = decode_buf[tempMemory[encryptIndex]];
		tempMemory[encryptIndex] ^= 3;
	}
	return 1;
}
int decryptConfigData(gbyte* buffer, guint size, guint key)
{
	if (buffer == NULL)
	{
		return 0;
	}

	if (size == 0)
	{
		return 0;
	}
	return decryptConfigData_impl(buffer, size, key);
}

int ecryptConfigData(gbyte* buffer, guint size, guint key)
{
	if (buffer == NULL)
	{
		return 0;
	}

	if (size == 0)
	{
		return 0;
	}
	return ecryptConfigData_impl(buffer, size, key);
}
gbyte* ReadAllFile(char * path,int *length)
{
	ifstream reader;
	reader.open(path, ios::in | ios::binary);
	if (!reader.is_open())
	{
		return false;
	}

	unsigned char UTF8Buff[3];

	//UTF8文件
	reader.read((char*)UTF8Buff, 3);
	if (UTF8Buff[0] != 239 &&
		UTF8Buff[1] != 187 &&
		UTF8Buff[2] != 191)
	{
		return false;
	}

	////UTF8文件,加密后的值
	//reader.read((char*)UTF8Buff, 3);
	//if (UTF8Buff[0] != 160 &&
	//	UTF8Buff[1] != 91 &&
	//	UTF8Buff[2] != 146)
	//{
	//	return false;
	//}

	//先申请2M内存
	int bufferSize = 2 * 1024 * 1024;
	//一次扩容256KB;
	int grewBufferSize = 256;
	char buff[256];
	int grewCount = 0;
	char *tempBuffer = new char[bufferSize];
	ZeroMemory(tempBuffer, bufferSize);

	int readCount = 0;
	int currentReadCount = 0;
	while (reader.good())
	{
		ZeroMemory(buff, 256);
		reader.read(buff, 256);
		currentReadCount = reader.gcount();

		//进行扩容
		if (readCount >= bufferSize)
		{
			grewCount++;
			char *old = tempBuffer;
			tempBuffer = new char[bufferSize + grewCount * grewBufferSize];
			memcpy(tempBuffer, old, readCount);
			delete old;
		}

		if (readCount == 0)
		{
			memcpy(tempBuffer, buff, currentReadCount);
		}
		else
		{
			memcpy(tempBuffer + readCount - 1, buff, currentReadCount);
		}
		readCount += currentReadCount;

	}
	readCount--;
	reader.close();
	*length = readCount;
	//decryptConfigData((gbyte*)tempBuffer, (guint)readCount, 0);
	ecryptConfigData((gbyte*)tempBuffer, (guint)readCount, 0);
	return (gbyte*)tempBuffer;
}

void WriteFile(const char *path,gbyte *buffer,int length)
{
	ofstream writer(path);
	if (writer.is_open())
	{
		for (int i = 0; i < length;i++)
		{
			writer << buffer[i];
		}
		writer.flush();
		writer.close();
	}
}
int main(int argc, char* argv[])
{
	for (int i = 1; i < argc; i++)
	{
		int length;
		string st = argv[i];
		st += "_en";
		gbyte* data = ReadAllFile(argv[i], &length);
		WriteFile(st.c_str(), data, length);
	}

	return 1;
}